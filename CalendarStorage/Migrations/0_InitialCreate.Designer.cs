// <auto-generated />
using System;
using CalendarStorage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CalendarStorage.Migrations
{
    [DbContext(typeof(CalendarStoreContext))]
    [Migration("0_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("CalendarStorage.Data.CalendarBlob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .HasColumnType("BLOB");

                    b.Property<int>("SnapshotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotId")
                        .IsUnique();

                    b.ToTable("DataBlobs");
                });

            modelBuilder.Entity("CalendarStorage.Data.CalendarSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventModifiedAt_IntervalEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventModifiedAt_IntervalStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SnapshotType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SnapshotType");

                    b.HasIndex("Timestamp")
                        .IsUnique();

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("CalendarStorage.Data.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastSeen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PassphraseHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("CalendarStorage.Data.CalendarBlob", b =>
                {
                    b.HasOne("CalendarStorage.Data.CalendarSnapshot", "Snapshot")
                        .WithOne("DataBlob")
                        .HasForeignKey("CalendarStorage.Data.CalendarBlob", "SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("CalendarStorage.Data.CalendarSnapshot", b =>
                {
                    b.HasOne("CalendarStorage.Data.Owner", "Owner")
                        .WithMany("Snapshots")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CalendarStorage.Data.CalendarSnapshot", b =>
                {
                    b.Navigation("DataBlob");
                });

            modelBuilder.Entity("CalendarStorage.Data.Owner", b =>
                {
                    b.Navigation("Snapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
